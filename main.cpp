#include <QGuiApplication>
#include <QQmlApplicationEngine>
#include <QQmlContext>
/*
 * Необходимо реализовать программу, для игры в шахматы на одном компьютере.
 *
 * После загрузки приложения, должен отрисовываться экран1, на котором отображается пустая шахматная доска и следующие активные элементы.
 *    Start  - переходит в Экран2
 *    Load – загружает выбранный пользователем файл и переходит в Экран3
 *
 * Экран2:
 * После нажатия кнопки start появляются фигуры на доске (в начальной позиции), которые можно передвигать используя мышку
 * строго по очереди(белая фигура-черная фигура-белая фигура...). Проверка на шаг/мат не обязательна,
 * достаточно проверять корректность хода фигуры. В данном режиме, так же доступны следующие кнопки:
 *        Stop  - при нажатии, программа переходит в экран1.
 *        Save – сохраняет историю ходов в указанный пользователем файл.
 *
 * Экран3
 *             Загружает сохраненную партию и с помощью кнопок Next/Prev позволяет ее пошагово просматривать.
 * На данном экране досупны следующие кнопки:
 *
 *                  Start – поведение аналогично с экраном1
 *                  Load – поведение аналогично с экраном1
 *                  Next/ Prev – переход на следующий ход, согласно данным из файла.
 *
 * Критерии оценки: мы не будем обращать на качетсво текстур/графики, коментарии.
 *   Однако, для нас важно остсутствие крешей и утечек памяти. Так же мы будем обращать внимание на использованные имена для классов и функций,
 * иерархию классов, обработку исключительных ситуаций, а так же наличие глобальных переменных/singleton-ов
 *
 * Build система: qmake
 * Компилятор: g++ 4.8.x
 *
 * Технологии: QT, QML – обязательны
 * c++11, boost – на усмотрение разработчика
 *
 * Платформы: windows, linux (поддержка обеих операционных систем является не обязательной, но будет рассматриваться как плюс при оценке кода)
*/
#include "chesscontroller.h"

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    qmlRegisterType<ChessController>("Chess", 1, 0, "ChessController");

    ChessController chessController;

    QQmlApplicationEngine engine;
    QQmlContext *qmlcontext = engine.rootContext();
    if (!qmlcontext) {
        qWarning() << "Cannot get QML context";
        return 0;
    }
    qmlcontext->setContextProperty("chessController", &chessController);
    engine.load(QUrl(QStringLiteral("qml/main.qml")));

    return app.exec();
}
